// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hecklerpb.proto

package hecklerpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutputFormat int32

const (
	OutputFormat_none     OutputFormat = 0
	OutputFormat_markdown OutputFormat = 1
	// XXX
	OutputFormat_tty OutputFormat = 2
)

var OutputFormat_name = map[int32]string{
	0: "none",
	1: "markdown",
	2: "tty",
}

var OutputFormat_value = map[string]int32{
	"none":     0,
	"markdown": 1,
	"tty":      2,
}

func (x OutputFormat) String() string {
	return proto.EnumName(OutputFormat_name, int32(x))
}

func (OutputFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{0}
}

type HecklerStatusRequest struct {
	NodeSet string   `protobuf:"bytes,1,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes   []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *HecklerStatusRequest) Reset()         { *m = HecklerStatusRequest{} }
func (m *HecklerStatusRequest) String() string { return proto.CompactTextString(m) }
func (*HecklerStatusRequest) ProtoMessage()    {}
func (*HecklerStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{0}
}
func (m *HecklerStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerStatusRequest.Merge(m, src)
}
func (m *HecklerStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *HecklerStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerStatusRequest proto.InternalMessageInfo

func (m *HecklerStatusRequest) GetNodeSet() string {
	if m != nil {
		return m.NodeSet
	}
	return ""
}

func (m *HecklerStatusRequest) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type HecklerStatusReport struct {
	NodeStatuses map[string]string `protobuf:"bytes,1,rep,name=node_statuses,json=nodeStatuses,proto3" json:"node_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeErrors   map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HecklerStatusReport) Reset()         { *m = HecklerStatusReport{} }
func (m *HecklerStatusReport) String() string { return proto.CompactTextString(m) }
func (*HecklerStatusReport) ProtoMessage()    {}
func (*HecklerStatusReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{1}
}
func (m *HecklerStatusReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerStatusReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerStatusReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerStatusReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerStatusReport.Merge(m, src)
}
func (m *HecklerStatusReport) XXX_Size() int {
	return m.Size()
}
func (m *HecklerStatusReport) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerStatusReport.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerStatusReport proto.InternalMessageInfo

func (m *HecklerStatusReport) GetNodeStatuses() map[string]string {
	if m != nil {
		return m.NodeStatuses
	}
	return nil
}

func (m *HecklerStatusReport) GetNodeErrors() map[string]string {
	if m != nil {
		return m.NodeErrors
	}
	return nil
}

type HecklerNoopRangeRequest struct {
	User         string       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	BeginRev     string       `protobuf:"bytes,2,opt,name=begin_rev,json=beginRev,proto3" json:"begin_rev,omitempty"`
	EndRev       string       `protobuf:"bytes,3,opt,name=end_rev,json=endRev,proto3" json:"end_rev,omitempty"`
	OutputFormat OutputFormat `protobuf:"varint,4,opt,name=output_format,json=outputFormat,proto3,enum=hecklerpb.OutputFormat" json:"output_format,omitempty"`
	NodeSet      string       `protobuf:"bytes,5,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes        []string     `protobuf:"bytes,6,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *HecklerNoopRangeRequest) Reset()         { *m = HecklerNoopRangeRequest{} }
func (m *HecklerNoopRangeRequest) String() string { return proto.CompactTextString(m) }
func (*HecklerNoopRangeRequest) ProtoMessage()    {}
func (*HecklerNoopRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{2}
}
func (m *HecklerNoopRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerNoopRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerNoopRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerNoopRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerNoopRangeRequest.Merge(m, src)
}
func (m *HecklerNoopRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *HecklerNoopRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerNoopRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerNoopRangeRequest proto.InternalMessageInfo

func (m *HecklerNoopRangeRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *HecklerNoopRangeRequest) GetBeginRev() string {
	if m != nil {
		return m.BeginRev
	}
	return ""
}

func (m *HecklerNoopRangeRequest) GetEndRev() string {
	if m != nil {
		return m.EndRev
	}
	return ""
}

func (m *HecklerNoopRangeRequest) GetOutputFormat() OutputFormat {
	if m != nil {
		return m.OutputFormat
	}
	return OutputFormat_none
}

func (m *HecklerNoopRangeRequest) GetNodeSet() string {
	if m != nil {
		return m.NodeSet
	}
	return ""
}

func (m *HecklerNoopRangeRequest) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type HecklerNoopRangeReport struct {
	Output     string            `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	NodeErrors map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HecklerNoopRangeReport) Reset()         { *m = HecklerNoopRangeReport{} }
func (m *HecklerNoopRangeReport) String() string { return proto.CompactTextString(m) }
func (*HecklerNoopRangeReport) ProtoMessage()    {}
func (*HecklerNoopRangeReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{3}
}
func (m *HecklerNoopRangeReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerNoopRangeReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerNoopRangeReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerNoopRangeReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerNoopRangeReport.Merge(m, src)
}
func (m *HecklerNoopRangeReport) XXX_Size() int {
	return m.Size()
}
func (m *HecklerNoopRangeReport) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerNoopRangeReport.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerNoopRangeReport proto.InternalMessageInfo

func (m *HecklerNoopRangeReport) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *HecklerNoopRangeReport) GetNodeErrors() map[string]string {
	if m != nil {
		return m.NodeErrors
	}
	return nil
}

type HecklerApplyRequest struct {
	User         string       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Rev          string       `protobuf:"bytes,2,opt,name=rev,proto3" json:"rev,omitempty"`
	Noop         bool         `protobuf:"varint,3,opt,name=noop,proto3" json:"noop,omitempty"`
	Force        bool         `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	OutputFormat OutputFormat `protobuf:"varint,5,opt,name=output_format,json=outputFormat,proto3,enum=hecklerpb.OutputFormat" json:"output_format,omitempty"`
	NodeSet      string       `protobuf:"bytes,6,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes        []string     `protobuf:"bytes,7,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *HecklerApplyRequest) Reset()         { *m = HecklerApplyRequest{} }
func (m *HecklerApplyRequest) String() string { return proto.CompactTextString(m) }
func (*HecklerApplyRequest) ProtoMessage()    {}
func (*HecklerApplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{4}
}
func (m *HecklerApplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerApplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerApplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerApplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerApplyRequest.Merge(m, src)
}
func (m *HecklerApplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *HecklerApplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerApplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerApplyRequest proto.InternalMessageInfo

func (m *HecklerApplyRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *HecklerApplyRequest) GetRev() string {
	if m != nil {
		return m.Rev
	}
	return ""
}

func (m *HecklerApplyRequest) GetNoop() bool {
	if m != nil {
		return m.Noop
	}
	return false
}

func (m *HecklerApplyRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *HecklerApplyRequest) GetOutputFormat() OutputFormat {
	if m != nil {
		return m.OutputFormat
	}
	return OutputFormat_none
}

func (m *HecklerApplyRequest) GetNodeSet() string {
	if m != nil {
		return m.NodeSet
	}
	return ""
}

func (m *HecklerApplyRequest) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type HecklerApplyReport struct {
	Output     string            `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	NodeErrors map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HecklerApplyReport) Reset()         { *m = HecklerApplyReport{} }
func (m *HecklerApplyReport) String() string { return proto.CompactTextString(m) }
func (*HecklerApplyReport) ProtoMessage()    {}
func (*HecklerApplyReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{5}
}
func (m *HecklerApplyReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerApplyReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerApplyReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerApplyReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerApplyReport.Merge(m, src)
}
func (m *HecklerApplyReport) XXX_Size() int {
	return m.Size()
}
func (m *HecklerApplyReport) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerApplyReport.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerApplyReport proto.InternalMessageInfo

func (m *HecklerApplyReport) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *HecklerApplyReport) GetNodeErrors() map[string]string {
	if m != nil {
		return m.NodeErrors
	}
	return nil
}

type HecklerLockRequest struct {
	User    string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Comment string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Force   bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	NodeSet string   `protobuf:"bytes,4,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes   []string `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *HecklerLockRequest) Reset()         { *m = HecklerLockRequest{} }
func (m *HecklerLockRequest) String() string { return proto.CompactTextString(m) }
func (*HecklerLockRequest) ProtoMessage()    {}
func (*HecklerLockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{6}
}
func (m *HecklerLockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerLockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerLockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerLockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerLockRequest.Merge(m, src)
}
func (m *HecklerLockRequest) XXX_Size() int {
	return m.Size()
}
func (m *HecklerLockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerLockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerLockRequest proto.InternalMessageInfo

func (m *HecklerLockRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *HecklerLockRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *HecklerLockRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *HecklerLockRequest) GetNodeSet() string {
	if m != nil {
		return m.NodeSet
	}
	return ""
}

func (m *HecklerLockRequest) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type HecklerLockReport struct {
	LockedNodes []string          `protobuf:"bytes,1,rep,name=locked_nodes,json=lockedNodes,proto3" json:"locked_nodes,omitempty"`
	NodeErrors  map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HecklerLockReport) Reset()         { *m = HecklerLockReport{} }
func (m *HecklerLockReport) String() string { return proto.CompactTextString(m) }
func (*HecklerLockReport) ProtoMessage()    {}
func (*HecklerLockReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{7}
}
func (m *HecklerLockReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerLockReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerLockReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerLockReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerLockReport.Merge(m, src)
}
func (m *HecklerLockReport) XXX_Size() int {
	return m.Size()
}
func (m *HecklerLockReport) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerLockReport.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerLockReport proto.InternalMessageInfo

func (m *HecklerLockReport) GetLockedNodes() []string {
	if m != nil {
		return m.LockedNodes
	}
	return nil
}

func (m *HecklerLockReport) GetNodeErrors() map[string]string {
	if m != nil {
		return m.NodeErrors
	}
	return nil
}

type HecklerUnlockRequest struct {
	User    string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Force   bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	NodeSet string   `protobuf:"bytes,3,opt,name=node_set,json=nodeSet,proto3" json:"node_set,omitempty"`
	Nodes   []string `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *HecklerUnlockRequest) Reset()         { *m = HecklerUnlockRequest{} }
func (m *HecklerUnlockRequest) String() string { return proto.CompactTextString(m) }
func (*HecklerUnlockRequest) ProtoMessage()    {}
func (*HecklerUnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{8}
}
func (m *HecklerUnlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerUnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerUnlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerUnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerUnlockRequest.Merge(m, src)
}
func (m *HecklerUnlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *HecklerUnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerUnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerUnlockRequest proto.InternalMessageInfo

func (m *HecklerUnlockRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *HecklerUnlockRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *HecklerUnlockRequest) GetNodeSet() string {
	if m != nil {
		return m.NodeSet
	}
	return ""
}

func (m *HecklerUnlockRequest) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type HecklerUnlockReport struct {
	UnlockedNodes []string          `protobuf:"bytes,1,rep,name=unlocked_nodes,json=unlockedNodes,proto3" json:"unlocked_nodes,omitempty"`
	NodeErrors    map[string]string `protobuf:"bytes,2,rep,name=node_errors,json=nodeErrors,proto3" json:"node_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HecklerUnlockReport) Reset()         { *m = HecklerUnlockReport{} }
func (m *HecklerUnlockReport) String() string { return proto.CompactTextString(m) }
func (*HecklerUnlockReport) ProtoMessage()    {}
func (*HecklerUnlockReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_993bd662ef9f4722, []int{9}
}
func (m *HecklerUnlockReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HecklerUnlockReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HecklerUnlockReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HecklerUnlockReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HecklerUnlockReport.Merge(m, src)
}
func (m *HecklerUnlockReport) XXX_Size() int {
	return m.Size()
}
func (m *HecklerUnlockReport) XXX_DiscardUnknown() {
	xxx_messageInfo_HecklerUnlockReport.DiscardUnknown(m)
}

var xxx_messageInfo_HecklerUnlockReport proto.InternalMessageInfo

func (m *HecklerUnlockReport) GetUnlockedNodes() []string {
	if m != nil {
		return m.UnlockedNodes
	}
	return nil
}

func (m *HecklerUnlockReport) GetNodeErrors() map[string]string {
	if m != nil {
		return m.NodeErrors
	}
	return nil
}

func init() {
	proto.RegisterEnum("hecklerpb.OutputFormat", OutputFormat_name, OutputFormat_value)
	proto.RegisterType((*HecklerStatusRequest)(nil), "hecklerpb.HecklerStatusRequest")
	proto.RegisterType((*HecklerStatusReport)(nil), "hecklerpb.HecklerStatusReport")
	proto.RegisterMapType((map[string]string)(nil), "hecklerpb.HecklerStatusReport.NodeErrorsEntry")
	proto.RegisterMapType((map[string]string)(nil), "hecklerpb.HecklerStatusReport.NodeStatusesEntry")
	proto.RegisterType((*HecklerNoopRangeRequest)(nil), "hecklerpb.HecklerNoopRangeRequest")
	proto.RegisterType((*HecklerNoopRangeReport)(nil), "hecklerpb.HecklerNoopRangeReport")
	proto.RegisterMapType((map[string]string)(nil), "hecklerpb.HecklerNoopRangeReport.NodeErrorsEntry")
	proto.RegisterType((*HecklerApplyRequest)(nil), "hecklerpb.HecklerApplyRequest")
	proto.RegisterType((*HecklerApplyReport)(nil), "hecklerpb.HecklerApplyReport")
	proto.RegisterMapType((map[string]string)(nil), "hecklerpb.HecklerApplyReport.NodeErrorsEntry")
	proto.RegisterType((*HecklerLockRequest)(nil), "hecklerpb.HecklerLockRequest")
	proto.RegisterType((*HecklerLockReport)(nil), "hecklerpb.HecklerLockReport")
	proto.RegisterMapType((map[string]string)(nil), "hecklerpb.HecklerLockReport.NodeErrorsEntry")
	proto.RegisterType((*HecklerUnlockRequest)(nil), "hecklerpb.HecklerUnlockRequest")
	proto.RegisterType((*HecklerUnlockReport)(nil), "hecklerpb.HecklerUnlockReport")
	proto.RegisterMapType((map[string]string)(nil), "hecklerpb.HecklerUnlockReport.NodeErrorsEntry")
}

func init() { proto.RegisterFile("hecklerpb.proto", fileDescriptor_993bd662ef9f4722) }

var fileDescriptor_993bd662ef9f4722 = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xf6, 0xc6, 0xf9, 0x3b, 0x49, 0xda, 0x74, 0x7f, 0x55, 0xeb, 0x5f, 0xa1, 0x26, 0xb5, 0x84,
	0x14, 0x21, 0x88, 0x4a, 0xb8, 0x20, 0xa4, 0x0a, 0x81, 0x54, 0xe0, 0x50, 0x5a, 0xc9, 0x55, 0x4f,
	0x1c, 0xa2, 0x34, 0xd9, 0x16, 0x94, 0x64, 0xd7, 0xb5, 0xd7, 0x45, 0x79, 0x04, 0x6e, 0xbc, 0x08,
	0x4f, 0x80, 0x38, 0xc1, 0x81, 0x03, 0x87, 0x4a, 0x08, 0x89, 0x23, 0x6a, 0x5f, 0x04, 0x79, 0xd7,
	0x49, 0x36, 0xf1, 0x9f, 0x16, 0x50, 0x6f, 0x3b, 0xb3, 0x9e, 0x6f, 0x67, 0xbf, 0x6f, 0x66, 0xc7,
	0xb0, 0xf8, 0x9a, 0x74, 0xfb, 0x03, 0xe2, 0x3a, 0x87, 0x4d, 0xc7, 0x65, 0x9c, 0xe1, 0xd2, 0xc4,
	0x61, 0x3d, 0x87, 0xe5, 0x17, 0xd2, 0xd8, 0xe7, 0x1d, 0xee, 0x7b, 0x36, 0x39, 0xf1, 0x89, 0xc7,
	0xf1, 0xff, 0x50, 0xa4, 0xac, 0x47, 0xda, 0x1e, 0xe1, 0x06, 0xaa, 0xa3, 0x46, 0xc9, 0x2e, 0x04,
	0xf6, 0x3e, 0xe1, 0x78, 0x19, 0x72, 0xc1, 0xd2, 0x33, 0x32, 0x75, 0xbd, 0x51, 0xb2, 0xa5, 0x61,
	0x7d, 0xca, 0xc0, 0x7f, 0x73, 0x48, 0x0e, 0x73, 0x39, 0x3e, 0x80, 0xaa, 0x04, 0x12, 0x4e, 0xe2,
	0x19, 0xa8, 0xae, 0x37, 0xca, 0xad, 0xcd, 0xe6, 0x34, 0xa9, 0x98, 0xb0, 0xe6, 0x6e, 0x70, 0x58,
	0x18, 0xb2, 0x4d, 0xb9, 0x3b, 0xb2, 0x2b, 0x54, 0x71, 0xe1, 0x3d, 0x28, 0x0b, 0x58, 0xe2, 0xba,
	0xcc, 0x95, 0xa9, 0x94, 0x5b, 0xcd, 0x2b, 0x80, 0x6e, 0x8b, 0x00, 0x09, 0x09, 0x74, 0xe2, 0x58,
	0x7b, 0x0c, 0x4b, 0x91, 0x33, 0x71, 0x0d, 0xf4, 0x3e, 0x19, 0x85, 0x04, 0x04, 0xcb, 0xe0, 0xf2,
	0xa7, 0x9d, 0x81, 0x4f, 0x8c, 0x8c, 0xf0, 0x49, 0xe3, 0x51, 0xe6, 0x21, 0x5a, 0xdb, 0x82, 0xc5,
	0x39, 0xfc, 0x3f, 0x09, 0xb7, 0xbe, 0x23, 0x58, 0x0d, 0x73, 0xde, 0x65, 0xcc, 0xb1, 0x3b, 0xf4,
	0x98, 0x8c, 0xc5, 0xc0, 0x90, 0xf5, 0x3d, 0xe2, 0x86, 0x40, 0x62, 0x8d, 0x6f, 0x40, 0xe9, 0x90,
	0x1c, 0xbf, 0xa1, 0x6d, 0x97, 0x9c, 0x86, 0x68, 0x45, 0xe1, 0xb0, 0xc9, 0x29, 0x5e, 0x85, 0x02,
	0xa1, 0x3d, 0xb1, 0xa5, 0x8b, 0xad, 0x3c, 0xa1, 0xbd, 0x60, 0x63, 0x0b, 0xaa, 0xcc, 0xe7, 0x8e,
	0xcf, 0xdb, 0x47, 0xcc, 0x1d, 0x76, 0xb8, 0x91, 0xad, 0xa3, 0xc6, 0x42, 0xcb, 0x50, 0x88, 0xdb,
	0x53, 0xf7, 0xed, 0x8a, 0xfc, 0xfc, 0x99, 0xb0, 0x66, 0xaa, 0x22, 0x97, 0x50, 0x15, 0x79, 0xb5,
	0x2a, 0x3e, 0x23, 0x58, 0x89, 0xde, 0x4a, 0x14, 0xc6, 0x0a, 0xe4, 0x25, 0x76, 0x78, 0xad, 0xd0,
	0xc2, 0x76, 0x9c, 0xb2, 0xf7, 0xa3, 0xca, 0xce, 0xe1, 0xa5, 0x8a, 0xfb, 0x8f, 0xda, 0xfc, 0x40,
	0x93, 0xda, 0x7e, 0xe2, 0x38, 0x83, 0x51, 0x9a, 0x2e, 0x35, 0xd0, 0xa7, 0x8a, 0x04, 0xcb, 0xe0,
	0x2b, 0xca, 0x98, 0x23, 0x94, 0x28, 0xda, 0x62, 0x1d, 0x9c, 0x75, 0xc4, 0xdc, 0x2e, 0x11, 0xfc,
	0x17, 0x6d, 0x69, 0x44, 0xd5, 0xc9, 0xfd, 0xb5, 0x3a, 0xf9, 0x04, 0x75, 0x0a, 0xaa, 0x3a, 0x1f,
	0x11, 0xe0, 0xd9, 0x7b, 0xa5, 0x2a, 0xb3, 0x1b, 0xa7, 0xcc, 0xbd, 0xa8, 0x32, 0x0a, 0xd6, 0x75,
	0xaa, 0xf2, 0x6e, 0x9a, 0xfd, 0x0e, 0xeb, 0xf6, 0xd3, 0x44, 0x31, 0xa0, 0xd0, 0x65, 0xc3, 0x21,
	0xa1, 0x3c, 0x84, 0x19, 0x9b, 0x53, 0x21, 0x74, 0x55, 0x08, 0x95, 0xc9, 0x6c, 0x02, 0x93, 0x39,
	0x95, 0xc9, 0x2f, 0x08, 0x96, 0x66, 0x72, 0x11, 0x44, 0x6e, 0x40, 0x65, 0xc0, 0xba, 0x7d, 0xd2,
	0x6b, 0xcb, 0x10, 0x24, 0x42, 0xca, 0xd2, 0x17, 0x5c, 0xdd, 0xc3, 0x2f, 0xe3, 0x38, 0xbd, 0x1b,
	0xe5, 0x74, 0x8a, 0x7a, 0x9d, 0x94, 0x9e, 0x4c, 0xa6, 0xc1, 0x01, 0x1d, 0x5c, 0xc2, 0xe9, 0x84,
	0xb9, 0x4c, 0x12, 0x73, 0x7a, 0x02, 0x73, 0x59, 0x95, 0xb9, 0x6f, 0xd3, 0xde, 0x1a, 0x9f, 0x29,
	0xb8, 0xbb, 0x0d, 0x0b, 0x3e, 0x8d, 0x61, 0xaf, 0x3a, 0xf6, 0x4a, 0xfe, 0xae, 0x3a, 0x07, 0x54,
	0xec, 0x6b, 0x64, 0xf0, 0xce, 0x26, 0x54, 0x67, 0x5a, 0x14, 0x17, 0x83, 0xee, 0xa7, 0xa4, 0xa6,
	0xe1, 0x0a, 0x14, 0x87, 0x1d, 0xb7, 0xdf, 0x63, 0x6f, 0x69, 0x0d, 0xe1, 0x02, 0xe8, 0x9c, 0x8f,
	0x6a, 0x99, 0xd6, 0x07, 0x1d, 0x0a, 0x61, 0x92, 0xd8, 0x86, 0xea, 0xcc, 0xdc, 0xc2, 0xb7, 0x92,
	0x27, 0x9a, 0x50, 0x66, 0xcd, 0x4c, 0x1f, 0x79, 0x96, 0x86, 0x5f, 0x41, 0x6d, 0xfe, 0xc5, 0xc4,
	0x56, 0xea, 0x73, 0x2a, 0x91, 0x37, 0x2e, 0x7d, 0x72, 0x2d, 0x0d, 0xef, 0x41, 0x45, 0x6d, 0x7a,
	0x6c, 0x26, 0xbe, 0x06, 0x12, 0x74, 0x3d, 0xf5, 0xb5, 0xb0, 0x34, 0xbc, 0x03, 0x65, 0xa5, 0xe2,
	0xf1, 0x7a, 0x52, 0x27, 0x48, 0xb8, 0x9b, 0x69, 0x8d, 0x62, 0x69, 0x0a, 0x9f, 0x52, 0xff, 0x38,
	0x3e, 0x67, 0x2a, 0x3d, 0x8e, 0x4f, 0xb5, 0x74, 0x2c, 0xed, 0xa9, 0xf1, 0xf5, 0xdc, 0x44, 0x67,
	0xe7, 0x26, 0xfa, 0x75, 0x6e, 0xa2, 0xf7, 0x17, 0xa6, 0x76, 0x76, 0x61, 0x6a, 0x3f, 0x2f, 0x4c,
	0xed, 0x30, 0x2f, 0xfe, 0xae, 0x1e, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x36, 0xef, 0xca, 0xa2,
	0x70, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HecklerClient is the client API for Heckler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HecklerClient interface {
	HecklerStatus(ctx context.Context, in *HecklerStatusRequest, opts ...grpc.CallOption) (*HecklerStatusReport, error)
	HecklerNoopRange(ctx context.Context, in *HecklerNoopRangeRequest, opts ...grpc.CallOption) (*HecklerNoopRangeReport, error)
	HecklerApply(ctx context.Context, in *HecklerApplyRequest, opts ...grpc.CallOption) (*HecklerApplyReport, error)
	HecklerLock(ctx context.Context, in *HecklerLockRequest, opts ...grpc.CallOption) (*HecklerLockReport, error)
	HecklerUnlock(ctx context.Context, in *HecklerUnlockRequest, opts ...grpc.CallOption) (*HecklerUnlockReport, error)
}

type hecklerClient struct {
	cc *grpc.ClientConn
}

func NewHecklerClient(cc *grpc.ClientConn) HecklerClient {
	return &hecklerClient{cc}
}

func (c *hecklerClient) HecklerStatus(ctx context.Context, in *HecklerStatusRequest, opts ...grpc.CallOption) (*HecklerStatusReport, error) {
	out := new(HecklerStatusReport)
	err := c.cc.Invoke(ctx, "/hecklerpb.Heckler/HecklerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hecklerClient) HecklerNoopRange(ctx context.Context, in *HecklerNoopRangeRequest, opts ...grpc.CallOption) (*HecklerNoopRangeReport, error) {
	out := new(HecklerNoopRangeReport)
	err := c.cc.Invoke(ctx, "/hecklerpb.Heckler/HecklerNoopRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hecklerClient) HecklerApply(ctx context.Context, in *HecklerApplyRequest, opts ...grpc.CallOption) (*HecklerApplyReport, error) {
	out := new(HecklerApplyReport)
	err := c.cc.Invoke(ctx, "/hecklerpb.Heckler/HecklerApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hecklerClient) HecklerLock(ctx context.Context, in *HecklerLockRequest, opts ...grpc.CallOption) (*HecklerLockReport, error) {
	out := new(HecklerLockReport)
	err := c.cc.Invoke(ctx, "/hecklerpb.Heckler/HecklerLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hecklerClient) HecklerUnlock(ctx context.Context, in *HecklerUnlockRequest, opts ...grpc.CallOption) (*HecklerUnlockReport, error) {
	out := new(HecklerUnlockReport)
	err := c.cc.Invoke(ctx, "/hecklerpb.Heckler/HecklerUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HecklerServer is the server API for Heckler service.
type HecklerServer interface {
	HecklerStatus(context.Context, *HecklerStatusRequest) (*HecklerStatusReport, error)
	HecklerNoopRange(context.Context, *HecklerNoopRangeRequest) (*HecklerNoopRangeReport, error)
	HecklerApply(context.Context, *HecklerApplyRequest) (*HecklerApplyReport, error)
	HecklerLock(context.Context, *HecklerLockRequest) (*HecklerLockReport, error)
	HecklerUnlock(context.Context, *HecklerUnlockRequest) (*HecklerUnlockReport, error)
}

// UnimplementedHecklerServer can be embedded to have forward compatible implementations.
type UnimplementedHecklerServer struct {
}

func (*UnimplementedHecklerServer) HecklerStatus(ctx context.Context, req *HecklerStatusRequest) (*HecklerStatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HecklerStatus not implemented")
}
func (*UnimplementedHecklerServer) HecklerNoopRange(ctx context.Context, req *HecklerNoopRangeRequest) (*HecklerNoopRangeReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HecklerNoopRange not implemented")
}
func (*UnimplementedHecklerServer) HecklerApply(ctx context.Context, req *HecklerApplyRequest) (*HecklerApplyReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HecklerApply not implemented")
}
func (*UnimplementedHecklerServer) HecklerLock(ctx context.Context, req *HecklerLockRequest) (*HecklerLockReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HecklerLock not implemented")
}
func (*UnimplementedHecklerServer) HecklerUnlock(ctx context.Context, req *HecklerUnlockRequest) (*HecklerUnlockReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HecklerUnlock not implemented")
}

func RegisterHecklerServer(s *grpc.Server, srv HecklerServer) {
	s.RegisterService(&_Heckler_serviceDesc, srv)
}

func _Heckler_HecklerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HecklerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HecklerServer).HecklerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hecklerpb.Heckler/HecklerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HecklerServer).HecklerStatus(ctx, req.(*HecklerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heckler_HecklerNoopRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HecklerNoopRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HecklerServer).HecklerNoopRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hecklerpb.Heckler/HecklerNoopRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HecklerServer).HecklerNoopRange(ctx, req.(*HecklerNoopRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heckler_HecklerApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HecklerApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HecklerServer).HecklerApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hecklerpb.Heckler/HecklerApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HecklerServer).HecklerApply(ctx, req.(*HecklerApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heckler_HecklerLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HecklerLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HecklerServer).HecklerLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hecklerpb.Heckler/HecklerLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HecklerServer).HecklerLock(ctx, req.(*HecklerLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heckler_HecklerUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HecklerUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HecklerServer).HecklerUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hecklerpb.Heckler/HecklerUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HecklerServer).HecklerUnlock(ctx, req.(*HecklerUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heckler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hecklerpb.Heckler",
	HandlerType: (*HecklerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HecklerStatus",
			Handler:    _Heckler_HecklerStatus_Handler,
		},
		{
			MethodName: "HecklerNoopRange",
			Handler:    _Heckler_HecklerNoopRange_Handler,
		},
		{
			MethodName: "HecklerApply",
			Handler:    _Heckler_HecklerApply_Handler,
		},
		{
			MethodName: "HecklerLock",
			Handler:    _Heckler_HecklerLock_Handler,
		},
		{
			MethodName: "HecklerUnlock",
			Handler:    _Heckler_HecklerUnlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hecklerpb.proto",
}

func (m *HecklerStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nodes[iNdEx])
			copy(dAtA[i:], m.Nodes[iNdEx])
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Nodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NodeSet) > 0 {
		i -= len(m.NodeSet)
		copy(dAtA[i:], m.NodeSet)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.NodeSet)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HecklerStatusReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerStatusReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerStatusReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeErrors) > 0 {
		for k := range m.NodeErrors {
			v := m.NodeErrors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHecklerpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NodeStatuses) > 0 {
		for k := range m.NodeStatuses {
			v := m.NodeStatuses[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHecklerpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HecklerNoopRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerNoopRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerNoopRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nodes[iNdEx])
			copy(dAtA[i:], m.Nodes[iNdEx])
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Nodes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NodeSet) > 0 {
		i -= len(m.NodeSet)
		copy(dAtA[i:], m.NodeSet)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.NodeSet)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OutputFormat != 0 {
		i = encodeVarintHecklerpb(dAtA, i, uint64(m.OutputFormat))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EndRev) > 0 {
		i -= len(m.EndRev)
		copy(dAtA[i:], m.EndRev)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.EndRev)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BeginRev) > 0 {
		i -= len(m.BeginRev)
		copy(dAtA[i:], m.BeginRev)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.BeginRev)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HecklerNoopRangeReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerNoopRangeReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerNoopRangeReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeErrors) > 0 {
		for k := range m.NodeErrors {
			v := m.NodeErrors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHecklerpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HecklerApplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerApplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerApplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nodes[iNdEx])
			copy(dAtA[i:], m.Nodes[iNdEx])
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Nodes[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NodeSet) > 0 {
		i -= len(m.NodeSet)
		copy(dAtA[i:], m.NodeSet)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.NodeSet)))
		i--
		dAtA[i] = 0x32
	}
	if m.OutputFormat != 0 {
		i = encodeVarintHecklerpb(dAtA, i, uint64(m.OutputFormat))
		i--
		dAtA[i] = 0x28
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Noop {
		i--
		if m.Noop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Rev) > 0 {
		i -= len(m.Rev)
		copy(dAtA[i:], m.Rev)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Rev)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HecklerApplyReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerApplyReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerApplyReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeErrors) > 0 {
		for k := range m.NodeErrors {
			v := m.NodeErrors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHecklerpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HecklerLockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerLockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerLockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nodes[iNdEx])
			copy(dAtA[i:], m.Nodes[iNdEx])
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Nodes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NodeSet) > 0 {
		i -= len(m.NodeSet)
		copy(dAtA[i:], m.NodeSet)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.NodeSet)))
		i--
		dAtA[i] = 0x22
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HecklerLockReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerLockReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerLockReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeErrors) > 0 {
		for k := range m.NodeErrors {
			v := m.NodeErrors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHecklerpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LockedNodes) > 0 {
		for iNdEx := len(m.LockedNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockedNodes[iNdEx])
			copy(dAtA[i:], m.LockedNodes[iNdEx])
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.LockedNodes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HecklerUnlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerUnlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerUnlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nodes[iNdEx])
			copy(dAtA[i:], m.Nodes[iNdEx])
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.Nodes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NodeSet) > 0 {
		i -= len(m.NodeSet)
		copy(dAtA[i:], m.NodeSet)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.NodeSet)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HecklerUnlockReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HecklerUnlockReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HecklerUnlockReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeErrors) > 0 {
		for k := range m.NodeErrors {
			v := m.NodeErrors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHecklerpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UnlockedNodes) > 0 {
		for iNdEx := len(m.UnlockedNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnlockedNodes[iNdEx])
			copy(dAtA[i:], m.UnlockedNodes[iNdEx])
			i = encodeVarintHecklerpb(dAtA, i, uint64(len(m.UnlockedNodes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintHecklerpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovHecklerpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HecklerStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeSet)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			l = len(s)
			n += 1 + l + sovHecklerpb(uint64(l))
		}
	}
	return n
}

func (m *HecklerStatusReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeStatuses) > 0 {
		for k, v := range m.NodeStatuses {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHecklerpb(uint64(len(k))) + 1 + len(v) + sovHecklerpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovHecklerpb(uint64(mapEntrySize))
		}
	}
	if len(m.NodeErrors) > 0 {
		for k, v := range m.NodeErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHecklerpb(uint64(len(k))) + 1 + len(v) + sovHecklerpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovHecklerpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HecklerNoopRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	l = len(m.BeginRev)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	l = len(m.EndRev)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if m.OutputFormat != 0 {
		n += 1 + sovHecklerpb(uint64(m.OutputFormat))
	}
	l = len(m.NodeSet)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			l = len(s)
			n += 1 + l + sovHecklerpb(uint64(l))
		}
	}
	return n
}

func (m *HecklerNoopRangeReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if len(m.NodeErrors) > 0 {
		for k, v := range m.NodeErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHecklerpb(uint64(len(k))) + 1 + len(v) + sovHecklerpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovHecklerpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HecklerApplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	l = len(m.Rev)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if m.Noop {
		n += 2
	}
	if m.Force {
		n += 2
	}
	if m.OutputFormat != 0 {
		n += 1 + sovHecklerpb(uint64(m.OutputFormat))
	}
	l = len(m.NodeSet)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			l = len(s)
			n += 1 + l + sovHecklerpb(uint64(l))
		}
	}
	return n
}

func (m *HecklerApplyReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if len(m.NodeErrors) > 0 {
		for k, v := range m.NodeErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHecklerpb(uint64(len(k))) + 1 + len(v) + sovHecklerpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovHecklerpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HecklerLockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if m.Force {
		n += 2
	}
	l = len(m.NodeSet)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			l = len(s)
			n += 1 + l + sovHecklerpb(uint64(l))
		}
	}
	return n
}

func (m *HecklerLockReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedNodes) > 0 {
		for _, s := range m.LockedNodes {
			l = len(s)
			n += 1 + l + sovHecklerpb(uint64(l))
		}
	}
	if len(m.NodeErrors) > 0 {
		for k, v := range m.NodeErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHecklerpb(uint64(len(k))) + 1 + len(v) + sovHecklerpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovHecklerpb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HecklerUnlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if m.Force {
		n += 2
	}
	l = len(m.NodeSet)
	if l > 0 {
		n += 1 + l + sovHecklerpb(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			l = len(s)
			n += 1 + l + sovHecklerpb(uint64(l))
		}
	}
	return n
}

func (m *HecklerUnlockReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnlockedNodes) > 0 {
		for _, s := range m.UnlockedNodes {
			l = len(s)
			n += 1 + l + sovHecklerpb(uint64(l))
		}
	}
	if len(m.NodeErrors) > 0 {
		for k, v := range m.NodeErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHecklerpb(uint64(len(k))) + 1 + len(v) + sovHecklerpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovHecklerpb(uint64(mapEntrySize))
		}
	}
	return n
}

func sovHecklerpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHecklerpb(x uint64) (n int) {
	return sovHecklerpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HecklerStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerStatusReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerStatusReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerStatusReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeStatuses == nil {
				m.NodeStatuses = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHecklerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHecklerpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeErrors == nil {
				m.NodeErrors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHecklerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHecklerpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeErrors[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerNoopRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerNoopRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerNoopRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginRev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginRev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndRev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndRev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputFormat", wireType)
			}
			m.OutputFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputFormat |= OutputFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerNoopRangeReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerNoopRangeReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerNoopRangeReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeErrors == nil {
				m.NodeErrors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHecklerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHecklerpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeErrors[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerApplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerApplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerApplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noop = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputFormat", wireType)
			}
			m.OutputFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputFormat |= OutputFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerApplyReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerApplyReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerApplyReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeErrors == nil {
				m.NodeErrors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHecklerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHecklerpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeErrors[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerLockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerLockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerLockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerLockReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerLockReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerLockReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedNodes = append(m.LockedNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeErrors == nil {
				m.NodeErrors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHecklerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHecklerpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeErrors[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerUnlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerUnlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerUnlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HecklerUnlockReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HecklerUnlockReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HecklerUnlockReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockedNodes = append(m.UnlockedNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHecklerpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeErrors == nil {
				m.NodeErrors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHecklerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHecklerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHecklerpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHecklerpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeErrors[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHecklerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHecklerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHecklerpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHecklerpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHecklerpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHecklerpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHecklerpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHecklerpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHecklerpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHecklerpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHecklerpb = fmt.Errorf("proto: unexpected end of group")
)
