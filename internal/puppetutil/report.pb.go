// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: report.proto

package puppetutil

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Property         string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	PreviousValue    string `protobuf:"bytes,2,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	DesiredValue     string `protobuf:"bytes,3,opt,name=desired_value,json=desiredValue,proto3" json:"desired_value,omitempty"`
	Message          string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Name             string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Status           string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CorrectiveChange bool   `protobuf:"varint,7,opt,name=corrective_change,json=correctiveChange,proto3" json:"corrective_change,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *Event) GetPreviousValue() string {
	if m != nil {
		return m.PreviousValue
	}
	return ""
}

func (m *Event) GetDesiredValue() string {
	if m != nil {
		return m.DesiredValue
	}
	return ""
}

func (m *Event) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Event) GetCorrectiveChange() bool {
	if m != nil {
		return m.CorrectiveChange
	}
	return false
}

type Log struct {
	Level   string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Source  string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{1}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *Log) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Log) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type PuppetReport struct {
	Host                 string                     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	ConfigurationVersion string                     `protobuf:"bytes,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty"`
	ReportFormat         int64                      `protobuf:"varint,3,opt,name=report_format,json=reportFormat,proto3" json:"report_format,omitempty"`
	PuppetVersion        string                     `protobuf:"bytes,4,opt,name=puppet_version,json=puppetVersion,proto3" json:"puppet_version,omitempty"`
	Status               string                     `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	TransactionCompleted bool                       `protobuf:"varint,6,opt,name=transaction_completed,json=transactionCompleted,proto3" json:"transaction_completed,omitempty"`
	Noop                 bool                       `protobuf:"varint,7,opt,name=noop,proto3" json:"noop,omitempty"`
	NoopPending          bool                       `protobuf:"varint,8,opt,name=noop_pending,json=noopPending,proto3" json:"noop_pending,omitempty"`
	Environment          string                     `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
	Logs                 []*Log                     `protobuf:"bytes,10,rep,name=logs,proto3" json:"logs,omitempty"`
	ResourceStatuses     map[string]*ResourceStatus `protobuf:"bytes,11,rep,name=resource_statuses,json=resourceStatuses,proto3" json:"resource_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CorrectiveChange     bool                       `protobuf:"varint,12,opt,name=corrective_change,json=correctiveChange,proto3" json:"corrective_change,omitempty"`
	CachedCatalogStatus  string                     `protobuf:"bytes,13,opt,name=cached_catalog_status,json=cachedCatalogStatus,proto3" json:"cached_catalog_status,omitempty"`
}

func (m *PuppetReport) Reset()         { *m = PuppetReport{} }
func (m *PuppetReport) String() string { return proto.CompactTextString(m) }
func (*PuppetReport) ProtoMessage()    {}
func (*PuppetReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{2}
}
func (m *PuppetReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PuppetReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PuppetReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PuppetReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PuppetReport.Merge(m, src)
}
func (m *PuppetReport) XXX_Size() int {
	return m.Size()
}
func (m *PuppetReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PuppetReport.DiscardUnknown(m)
}

var xxx_messageInfo_PuppetReport proto.InternalMessageInfo

func (m *PuppetReport) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PuppetReport) GetConfigurationVersion() string {
	if m != nil {
		return m.ConfigurationVersion
	}
	return ""
}

func (m *PuppetReport) GetReportFormat() int64 {
	if m != nil {
		return m.ReportFormat
	}
	return 0
}

func (m *PuppetReport) GetPuppetVersion() string {
	if m != nil {
		return m.PuppetVersion
	}
	return ""
}

func (m *PuppetReport) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PuppetReport) GetTransactionCompleted() bool {
	if m != nil {
		return m.TransactionCompleted
	}
	return false
}

func (m *PuppetReport) GetNoop() bool {
	if m != nil {
		return m.Noop
	}
	return false
}

func (m *PuppetReport) GetNoopPending() bool {
	if m != nil {
		return m.NoopPending
	}
	return false
}

func (m *PuppetReport) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *PuppetReport) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *PuppetReport) GetResourceStatuses() map[string]*ResourceStatus {
	if m != nil {
		return m.ResourceStatuses
	}
	return nil
}

func (m *PuppetReport) GetCorrectiveChange() bool {
	if m != nil {
		return m.CorrectiveChange
	}
	return false
}

func (m *PuppetReport) GetCachedCatalogStatus() string {
	if m != nil {
		return m.CachedCatalogStatus
	}
	return ""
}

type ResourceStatus struct {
	ChangeCount      int64    `protobuf:"varint,1,opt,name=change_count,json=changeCount,proto3" json:"change_count,omitempty"`
	Changed          bool     `protobuf:"varint,2,opt,name=changed,proto3" json:"changed,omitempty"`
	ContainmentPath  []string `protobuf:"bytes,3,rep,name=containment_path,json=containmentPath,proto3" json:"containment_path,omitempty"`
	CorrectiveChange bool     `protobuf:"varint,4,opt,name=corrective_change,json=correctiveChange,proto3" json:"corrective_change,omitempty"`
	Failed           bool     `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`
	FailedToRestart  bool     `protobuf:"varint,6,opt,name=failed_to_restart,json=failedToRestart,proto3" json:"failed_to_restart,omitempty"`
	//
	// XXX Removing these for now, as it breaks grouping for resources that are
	// defined in diffent places in the source code. Should they be readded, i.e.
	// is the common case to have the same source line & file location, probably?
	//
	// string file = ?;
	// int64 line = ?;
	OutOfSync      bool     `protobuf:"varint,7,opt,name=out_of_sync,json=outOfSync,proto3" json:"out_of_sync,omitempty"`
	OutOfSyncCount int64    `protobuf:"varint,8,opt,name=out_of_sync_count,json=outOfSyncCount,proto3" json:"out_of_sync_count,omitempty"`
	ProviderUsed   string   `protobuf:"bytes,9,opt,name=provider_used,json=providerUsed,proto3" json:"provider_used,omitempty"`
	Resource       string   `protobuf:"bytes,10,opt,name=resource,proto3" json:"resource,omitempty"`
	ResourceType   string   `protobuf:"bytes,11,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Skipped        bool     `protobuf:"varint,12,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Title          string   `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	Events         []*Event `protobuf:"bytes,14,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *ResourceStatus) Reset()         { *m = ResourceStatus{} }
func (m *ResourceStatus) String() string { return proto.CompactTextString(m) }
func (*ResourceStatus) ProtoMessage()    {}
func (*ResourceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{3}
}
func (m *ResourceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceStatus.Merge(m, src)
}
func (m *ResourceStatus) XXX_Size() int {
	return m.Size()
}
func (m *ResourceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceStatus proto.InternalMessageInfo

func (m *ResourceStatus) GetChangeCount() int64 {
	if m != nil {
		return m.ChangeCount
	}
	return 0
}

func (m *ResourceStatus) GetChanged() bool {
	if m != nil {
		return m.Changed
	}
	return false
}

func (m *ResourceStatus) GetContainmentPath() []string {
	if m != nil {
		return m.ContainmentPath
	}
	return nil
}

func (m *ResourceStatus) GetCorrectiveChange() bool {
	if m != nil {
		return m.CorrectiveChange
	}
	return false
}

func (m *ResourceStatus) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *ResourceStatus) GetFailedToRestart() bool {
	if m != nil {
		return m.FailedToRestart
	}
	return false
}

func (m *ResourceStatus) GetOutOfSync() bool {
	if m != nil {
		return m.OutOfSync
	}
	return false
}

func (m *ResourceStatus) GetOutOfSyncCount() int64 {
	if m != nil {
		return m.OutOfSyncCount
	}
	return 0
}

func (m *ResourceStatus) GetProviderUsed() string {
	if m != nil {
		return m.ProviderUsed
	}
	return ""
}

func (m *ResourceStatus) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ResourceStatus) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ResourceStatus) GetSkipped() bool {
	if m != nil {
		return m.Skipped
	}
	return false
}

func (m *ResourceStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ResourceStatus) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// The request message containing the git rev identifier, e.g. a tag or a
// commit id
type PuppetApplyRequest struct {
	Rev  string `protobuf:"bytes,1,opt,name=rev,proto3" json:"rev,omitempty"`
	Noop bool   `protobuf:"varint,2,opt,name=noop,proto3" json:"noop,omitempty"`
}

func (m *PuppetApplyRequest) Reset()         { *m = PuppetApplyRequest{} }
func (m *PuppetApplyRequest) String() string { return proto.CompactTextString(m) }
func (*PuppetApplyRequest) ProtoMessage()    {}
func (*PuppetApplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{4}
}
func (m *PuppetApplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PuppetApplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PuppetApplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PuppetApplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PuppetApplyRequest.Merge(m, src)
}
func (m *PuppetApplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *PuppetApplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PuppetApplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PuppetApplyRequest proto.InternalMessageInfo

func (m *PuppetApplyRequest) GetRev() string {
	if m != nil {
		return m.Rev
	}
	return ""
}

func (m *PuppetApplyRequest) GetNoop() bool {
	if m != nil {
		return m.Noop
	}
	return false
}

// Ask for last apply report
type PuppetLastApplyRequest struct {
}

func (m *PuppetLastApplyRequest) Reset()         { *m = PuppetLastApplyRequest{} }
func (m *PuppetLastApplyRequest) String() string { return proto.CompactTextString(m) }
func (*PuppetLastApplyRequest) ProtoMessage()    {}
func (*PuppetLastApplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{5}
}
func (m *PuppetLastApplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PuppetLastApplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PuppetLastApplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PuppetLastApplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PuppetLastApplyRequest.Merge(m, src)
}
func (m *PuppetLastApplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *PuppetLastApplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PuppetLastApplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PuppetLastApplyRequest proto.InternalMessageInfo

type PuppetLockRequest struct {
	User    string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *PuppetLockRequest) Reset()         { *m = PuppetLockRequest{} }
func (m *PuppetLockRequest) String() string { return proto.CompactTextString(m) }
func (*PuppetLockRequest) ProtoMessage()    {}
func (*PuppetLockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{6}
}
func (m *PuppetLockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PuppetLockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PuppetLockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PuppetLockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PuppetLockRequest.Merge(m, src)
}
func (m *PuppetLockRequest) XXX_Size() int {
	return m.Size()
}
func (m *PuppetLockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PuppetLockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PuppetLockRequest proto.InternalMessageInfo

func (m *PuppetLockRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *PuppetLockRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type PuppetLockReport struct {
	Host   string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Locked bool   `protobuf:"varint,2,opt,name=locked,proto3" json:"locked,omitempty"`
	Error  string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *PuppetLockReport) Reset()         { *m = PuppetLockReport{} }
func (m *PuppetLockReport) String() string { return proto.CompactTextString(m) }
func (*PuppetLockReport) ProtoMessage()    {}
func (*PuppetLockReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{7}
}
func (m *PuppetLockReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PuppetLockReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PuppetLockReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PuppetLockReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PuppetLockReport.Merge(m, src)
}
func (m *PuppetLockReport) XXX_Size() int {
	return m.Size()
}
func (m *PuppetLockReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PuppetLockReport.DiscardUnknown(m)
}

var xxx_messageInfo_PuppetLockReport proto.InternalMessageInfo

func (m *PuppetLockReport) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PuppetLockReport) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *PuppetLockReport) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PuppetUnlockRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *PuppetUnlockRequest) Reset()         { *m = PuppetUnlockRequest{} }
func (m *PuppetUnlockRequest) String() string { return proto.CompactTextString(m) }
func (*PuppetUnlockRequest) ProtoMessage()    {}
func (*PuppetUnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{8}
}
func (m *PuppetUnlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PuppetUnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PuppetUnlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PuppetUnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PuppetUnlockRequest.Merge(m, src)
}
func (m *PuppetUnlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *PuppetUnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PuppetUnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PuppetUnlockRequest proto.InternalMessageInfo

func (m *PuppetUnlockRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type PuppetUnlockReport struct {
	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Unlocked bool   `protobuf:"varint,2,opt,name=unlocked,proto3" json:"unlocked,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *PuppetUnlockReport) Reset()         { *m = PuppetUnlockReport{} }
func (m *PuppetUnlockReport) String() string { return proto.CompactTextString(m) }
func (*PuppetUnlockReport) ProtoMessage()    {}
func (*PuppetUnlockReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{9}
}
func (m *PuppetUnlockReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PuppetUnlockReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PuppetUnlockReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PuppetUnlockReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PuppetUnlockReport.Merge(m, src)
}
func (m *PuppetUnlockReport) XXX_Size() int {
	return m.Size()
}
func (m *PuppetUnlockReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PuppetUnlockReport.DiscardUnknown(m)
}

var xxx_messageInfo_PuppetUnlockReport proto.InternalMessageInfo

func (m *PuppetUnlockReport) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PuppetUnlockReport) GetUnlocked() bool {
	if m != nil {
		return m.Unlocked
	}
	return false
}

func (m *PuppetUnlockReport) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "puppetutil.Event")
	proto.RegisterType((*Log)(nil), "puppetutil.Log")
	proto.RegisterType((*PuppetReport)(nil), "puppetutil.PuppetReport")
	proto.RegisterMapType((map[string]*ResourceStatus)(nil), "puppetutil.PuppetReport.ResourceStatusesEntry")
	proto.RegisterType((*ResourceStatus)(nil), "puppetutil.ResourceStatus")
	proto.RegisterType((*PuppetApplyRequest)(nil), "puppetutil.PuppetApplyRequest")
	proto.RegisterType((*PuppetLastApplyRequest)(nil), "puppetutil.PuppetLastApplyRequest")
	proto.RegisterType((*PuppetLockRequest)(nil), "puppetutil.PuppetLockRequest")
	proto.RegisterType((*PuppetLockReport)(nil), "puppetutil.PuppetLockReport")
	proto.RegisterType((*PuppetUnlockRequest)(nil), "puppetutil.PuppetUnlockRequest")
	proto.RegisterType((*PuppetUnlockReport)(nil), "puppetutil.PuppetUnlockReport")
}

func init() { proto.RegisterFile("report.proto", fileDescriptor_3eedb623aa6ca98c) }

var fileDescriptor_3eedb623aa6ca98c = []byte{
	// 962 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x8e, 0x7f, 0xd7, 0x29, 0x3b, 0x89, 0xdd, 0xbb, 0x89, 0x5a, 0x16, 0x18, 0x33, 0x11, 0x52,
	0x02, 0x92, 0x85, 0x92, 0x0b, 0xda, 0xdb, 0x12, 0x2d, 0x12, 0x22, 0x88, 0x30, 0x9b, 0xdd, 0x03,
	0x1c, 0x46, 0xc3, 0x4c, 0xd9, 0x1e, 0x65, 0xdc, 0xdd, 0x74, 0xf7, 0x8c, 0xe4, 0x7d, 0x07, 0x24,
	0x5e, 0x0a, 0x89, 0xe3, 0x1e, 0x39, 0xa2, 0xe4, 0x19, 0xb8, 0xa3, 0xe9, 0xee, 0xb1, 0xc7, 0x89,
	0xbd, 0x27, 0x4f, 0x7d, 0x55, 0x5d, 0x5d, 0xf5, 0xd5, 0xd7, 0x25, 0x43, 0x4f, 0xa2, 0xe0, 0x52,
	0x4f, 0x84, 0xe4, 0x9a, 0x13, 0x10, 0x99, 0x10, 0xa8, 0x33, 0x9d, 0xa4, 0xde, 0x7d, 0x0d, 0x5a,
	0xaf, 0x73, 0x64, 0x9a, 0x0c, 0xa1, 0x23, 0x24, 0x17, 0x28, 0xf5, 0x92, 0xd6, 0xc6, 0xb5, 0xb3,
	0x7d, 0x7f, 0x65, 0x93, 0x2f, 0xe0, 0x50, 0x48, 0xcc, 0x13, 0x9e, 0xa9, 0x20, 0x0f, 0xd3, 0x0c,
	0x69, 0xdd, 0x44, 0x1c, 0x94, 0xe8, 0xbb, 0x02, 0x24, 0xa7, 0x70, 0x10, 0xa3, 0x4a, 0x24, 0xc6,
	0x2e, 0xaa, 0x61, 0xa2, 0x7a, 0x0e, 0xb4, 0x41, 0x14, 0x9e, 0x2d, 0x50, 0xa9, 0x70, 0x86, 0xb4,
	0x69, 0xdc, 0xa5, 0x49, 0x08, 0x34, 0x59, 0xb8, 0x40, 0xda, 0x32, 0xb0, 0xf9, 0x26, 0x27, 0xd0,
	0x56, 0x3a, 0xd4, 0x99, 0xa2, 0x6d, 0x83, 0x3a, 0x8b, 0x7c, 0x05, 0x83, 0x88, 0x4b, 0x89, 0x91,
	0x4e, 0x72, 0x0c, 0xa2, 0x79, 0xc8, 0x66, 0x48, 0x9f, 0x8d, 0x6b, 0x67, 0x1d, 0xbf, 0xbf, 0x76,
	0x5c, 0x19, 0xdc, 0xfb, 0x11, 0x1a, 0xd7, 0x7c, 0x46, 0x5e, 0x40, 0x2b, 0xc5, 0x1c, 0x53, 0xd7,
	0x9e, 0x35, 0xaa, 0xf5, 0xd4, 0x37, 0xeb, 0x29, 0xee, 0xe6, 0x99, 0x8c, 0xca, 0x3e, 0x9c, 0xe5,
	0xfd, 0xd1, 0x82, 0xde, 0x8d, 0xa1, 0xd0, 0x37, 0xb4, 0x16, 0x85, 0xcf, 0xb9, 0xd2, 0x2e, 0xaf,
	0xf9, 0x26, 0x97, 0x70, 0x1c, 0x71, 0x36, 0x4d, 0x66, 0x99, 0x0c, 0x75, 0xc2, 0x59, 0x90, 0xa3,
	0x54, 0x09, 0x67, 0xee, 0x92, 0x17, 0x1b, 0xce, 0x77, 0xd6, 0x57, 0x10, 0x68, 0x27, 0x15, 0x4c,
	0xb9, 0x5c, 0x84, 0xda, 0x5c, 0xdc, 0xf0, 0xdd, 0xf8, 0xbe, 0x33, 0x98, 0x19, 0x86, 0xb9, 0x7d,
	0x95, 0xb2, 0xe9, 0x86, 0x61, 0xd0, 0x32, 0xd7, 0x9a, 0xb9, 0xd6, 0x06, 0x73, 0x97, 0x70, 0xac,
	0x65, 0xc8, 0x54, 0x18, 0x99, 0xb2, 0x22, 0xbe, 0x10, 0x29, 0x6a, 0x8c, 0x0d, 0xc1, 0x1d, 0xff,
	0x45, 0xc5, 0x79, 0x55, 0xfa, 0xcc, 0x68, 0x38, 0x17, 0x8e, 0x61, 0xf3, 0x4d, 0x3e, 0x87, 0x5e,
	0xf1, 0x1b, 0x08, 0x64, 0x71, 0xc2, 0x66, 0xb4, 0x63, 0x7c, 0xdd, 0x02, 0xbb, 0xb1, 0x10, 0x19,
	0x43, 0x17, 0x59, 0x9e, 0x48, 0xce, 0x16, 0xc8, 0x34, 0xdd, 0x37, 0x85, 0x54, 0x21, 0x72, 0x0a,
	0xcd, 0x94, 0xcf, 0x14, 0x85, 0x71, 0xe3, 0xac, 0x7b, 0x71, 0x34, 0x59, 0x4b, 0x73, 0x72, 0xcd,
	0x67, 0xbe, 0x71, 0x92, 0x5f, 0x61, 0x20, 0xd1, 0x92, 0x1f, 0xd8, 0x2e, 0x50, 0xd1, 0xae, 0x39,
	0x31, 0xa9, 0x9e, 0xa8, 0x0e, 0x65, 0xe2, 0xbb, 0x13, 0x6f, 0xdc, 0x81, 0xd7, 0x4c, 0xcb, 0xa5,
	0xdf, 0x97, 0x8f, 0xe0, 0xed, 0x4a, 0xea, 0x6d, 0x57, 0x12, 0xb9, 0x80, 0xe3, 0x28, 0x8c, 0xe6,
	0x18, 0x07, 0x51, 0xa8, 0xc3, 0x94, 0xcf, 0x5c, 0x3d, 0xf4, 0xc0, 0xb4, 0xf6, 0xdc, 0x3a, 0xaf,
	0xac, 0xcf, 0x5e, 0x31, 0x0c, 0xe0, 0x78, 0x6b, 0x2d, 0xa4, 0x0f, 0x8d, 0x3b, 0x2c, 0x1f, 0x5b,
	0xf1, 0x49, 0xbe, 0x86, 0xd6, 0xfa, 0x79, 0x75, 0x2f, 0x86, 0xd5, 0xe6, 0x36, 0x73, 0xf8, 0x36,
	0xf0, 0x65, 0xfd, 0x9b, 0x9a, 0xf7, 0x5f, 0x03, 0x0e, 0x37, 0xbd, 0xc5, 0x6c, 0x6c, 0x27, 0x41,
	0xc4, 0x33, 0x66, 0x95, 0xd9, 0xf0, 0xbb, 0x16, 0xbb, 0x2a, 0xa0, 0x42, 0xf7, 0xd6, 0x8c, 0xcd,
	0x6d, 0x1d, 0xbf, 0x34, 0xc9, 0x39, 0xf4, 0x23, 0xce, 0x74, 0x98, 0x98, 0x11, 0x05, 0x22, 0xd4,
	0x73, 0xda, 0x18, 0x37, 0xce, 0xf6, 0xfd, 0xa3, 0x0a, 0x7e, 0x13, 0xea, 0xf9, 0x76, 0xf2, 0x9a,
	0x3b, 0xc8, 0x3b, 0x81, 0xf6, 0x34, 0x4c, 0x52, 0x8c, 0x8d, 0x22, 0x3b, 0xbe, 0xb3, 0xc8, 0x97,
	0x30, 0xb0, 0x5f, 0x81, 0xe6, 0x81, 0x44, 0xa5, 0x43, 0xa9, 0x9d, 0x1a, 0x8f, 0xac, 0xe3, 0x96,
	0xfb, 0x16, 0x26, 0x23, 0xe8, 0xf2, 0x4c, 0x07, 0x7c, 0x1a, 0xa8, 0x25, 0x8b, 0x9c, 0x1e, 0xf7,
	0x79, 0xa6, 0x7f, 0x9a, 0xbe, 0x59, 0xb2, 0x88, 0x9c, 0xc3, 0xa0, 0xe2, 0x77, 0xdd, 0x77, 0x4c,
	0xf7, 0x87, 0xab, 0x28, 0x4b, 0xc0, 0x29, 0x1c, 0x08, 0xc9, 0xf3, 0x24, 0x46, 0x19, 0x64, 0x0a,
	0x63, 0x27, 0xcf, 0x5e, 0x09, 0xbe, 0x55, 0x18, 0x17, 0x5b, 0xb1, 0x54, 0x0c, 0x05, 0xbb, 0x15,
	0x4b, 0xdb, 0xbe, 0x56, 0x27, 0x4b, 0xbd, 0x14, 0x48, 0xbb, 0x36, 0x41, 0x09, 0xde, 0x2e, 0x85,
	0x59, 0x77, 0xea, 0x2e, 0x11, 0x02, 0x63, 0x27, 0xaa, 0xd2, 0x2c, 0xd6, 0x91, 0x4e, 0x74, 0x8a,
	0x4e, 0x3b, 0xd6, 0x20, 0xe7, 0xd0, 0xc6, 0x62, 0x1f, 0x2b, 0x7a, 0x68, 0x04, 0x3e, 0xa8, 0x6a,
	0xc0, 0x6c, 0x6a, 0xdf, 0x05, 0x78, 0x2f, 0x81, 0x58, 0xc5, 0xbf, 0x12, 0x22, 0x5d, 0xfa, 0xf8,
	0x7b, 0x86, 0x4a, 0x17, 0xaa, 0x92, 0x98, 0x97, 0xaa, 0x92, 0x98, 0xaf, 0x1e, 0x6f, 0x7d, 0xfd,
	0x78, 0x3d, 0x0a, 0x27, 0xf6, 0xec, 0x75, 0xa8, 0x36, 0xce, 0x7b, 0xaf, 0x60, 0xe0, 0x3c, 0x3c,
	0xba, 0x2b, 0x93, 0x12, 0x68, 0x66, 0x0a, 0x65, 0xb9, 0xe1, 0x8a, 0x6f, 0x23, 0x20, 0xbe, 0x30,
	0x0f, 0xdb, 0x2d, 0x4e, 0x67, 0x7a, 0xb7, 0xd0, 0xaf, 0xa6, 0xd8, 0xb9, 0x23, 0x4f, 0xa0, 0x9d,
	0xf2, 0xe8, 0x6e, 0xa5, 0x40, 0x67, 0x15, 0xcc, 0xa0, 0x94, 0x5c, 0xba, 0xbd, 0x6b, 0x0d, 0xef,
	0x1c, 0x9e, 0xdb, 0xac, 0x6f, 0x59, 0xfa, 0xf1, 0xd2, 0xbc, 0x5f, 0x4a, 0x66, 0xca, 0xd0, 0x9d,
	0x25, 0x0c, 0xa1, 0x93, 0xb1, 0x8d, 0x22, 0x56, 0xf6, 0xf6, 0x32, 0x2e, 0xfe, 0xaa, 0x43, 0xcb,
	0x4f, 0xde, 0xbf, 0xe7, 0xe4, 0x7b, 0xe8, 0x56, 0xf8, 0x27, 0xa3, 0xa7, 0xab, 0xa8, 0x4a, 0xec,
	0x90, 0xee, 0x5a, 0x55, 0xde, 0x1e, 0xf9, 0x19, 0x8e, 0x1e, 0x8d, 0x83, 0x78, 0x4f, 0xc3, 0x1f,
	0xcf, 0xea, 0xa3, 0x29, 0x7f, 0x00, 0x58, 0x0f, 0x81, 0x7c, 0xba, 0x25, 0xdb, 0x9a, 0xc4, 0xe1,
	0x27, 0xbb, 0xdc, 0xab, 0xfa, 0x7a, 0x55, 0x42, 0xc9, 0x67, 0x4f, 0xe3, 0x37, 0xa6, 0x32, 0x1c,
	0xed, 0x0e, 0xb0, 0x29, 0xbf, 0xa5, 0x7f, 0xdf, 0x8f, 0x6a, 0x1f, 0xee, 0x47, 0xb5, 0x7f, 0xef,
	0x47, 0xb5, 0x3f, 0x1f, 0x46, 0x7b, 0x1f, 0x1e, 0x46, 0x7b, 0xff, 0x3c, 0x8c, 0xf6, 0x7e, 0x6b,
	0x9b, 0xbf, 0x29, 0x97, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x92, 0x1c, 0x54, 0xb6, 0x08,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RizzoClient is the client API for Rizzo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RizzoClient interface {
	// applies a ref
	PuppetApply(ctx context.Context, in *PuppetApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error)
	PuppetLastApply(ctx context.Context, in *PuppetLastApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error)
	PuppetLock(ctx context.Context, in *PuppetLockRequest, opts ...grpc.CallOption) (*PuppetLockReport, error)
	PuppetUnlock(ctx context.Context, in *PuppetUnlockRequest, opts ...grpc.CallOption) (*PuppetUnlockReport, error)
}

type rizzoClient struct {
	cc *grpc.ClientConn
}

func NewRizzoClient(cc *grpc.ClientConn) RizzoClient {
	return &rizzoClient{cc}
}

func (c *rizzoClient) PuppetApply(ctx context.Context, in *PuppetApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error) {
	out := new(PuppetReport)
	err := c.cc.Invoke(ctx, "/puppetutil.Rizzo/PuppetApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rizzoClient) PuppetLastApply(ctx context.Context, in *PuppetLastApplyRequest, opts ...grpc.CallOption) (*PuppetReport, error) {
	out := new(PuppetReport)
	err := c.cc.Invoke(ctx, "/puppetutil.Rizzo/PuppetLastApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rizzoClient) PuppetLock(ctx context.Context, in *PuppetLockRequest, opts ...grpc.CallOption) (*PuppetLockReport, error) {
	out := new(PuppetLockReport)
	err := c.cc.Invoke(ctx, "/puppetutil.Rizzo/PuppetLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rizzoClient) PuppetUnlock(ctx context.Context, in *PuppetUnlockRequest, opts ...grpc.CallOption) (*PuppetUnlockReport, error) {
	out := new(PuppetUnlockReport)
	err := c.cc.Invoke(ctx, "/puppetutil.Rizzo/PuppetUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RizzoServer is the server API for Rizzo service.
type RizzoServer interface {
	// applies a ref
	PuppetApply(context.Context, *PuppetApplyRequest) (*PuppetReport, error)
	PuppetLastApply(context.Context, *PuppetLastApplyRequest) (*PuppetReport, error)
	PuppetLock(context.Context, *PuppetLockRequest) (*PuppetLockReport, error)
	PuppetUnlock(context.Context, *PuppetUnlockRequest) (*PuppetUnlockReport, error)
}

// UnimplementedRizzoServer can be embedded to have forward compatible implementations.
type UnimplementedRizzoServer struct {
}

func (*UnimplementedRizzoServer) PuppetApply(ctx context.Context, req *PuppetApplyRequest) (*PuppetReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PuppetApply not implemented")
}
func (*UnimplementedRizzoServer) PuppetLastApply(ctx context.Context, req *PuppetLastApplyRequest) (*PuppetReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PuppetLastApply not implemented")
}
func (*UnimplementedRizzoServer) PuppetLock(ctx context.Context, req *PuppetLockRequest) (*PuppetLockReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PuppetLock not implemented")
}
func (*UnimplementedRizzoServer) PuppetUnlock(ctx context.Context, req *PuppetUnlockRequest) (*PuppetUnlockReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PuppetUnlock not implemented")
}

func RegisterRizzoServer(s *grpc.Server, srv RizzoServer) {
	s.RegisterService(&_Rizzo_serviceDesc, srv)
}

func _Rizzo_PuppetApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PuppetApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RizzoServer).PuppetApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puppetutil.Rizzo/PuppetApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RizzoServer).PuppetApply(ctx, req.(*PuppetApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rizzo_PuppetLastApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PuppetLastApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RizzoServer).PuppetLastApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puppetutil.Rizzo/PuppetLastApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RizzoServer).PuppetLastApply(ctx, req.(*PuppetLastApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rizzo_PuppetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PuppetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RizzoServer).PuppetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puppetutil.Rizzo/PuppetLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RizzoServer).PuppetLock(ctx, req.(*PuppetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rizzo_PuppetUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PuppetUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RizzoServer).PuppetUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puppetutil.Rizzo/PuppetUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RizzoServer).PuppetUnlock(ctx, req.(*PuppetUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rizzo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "puppetutil.Rizzo",
	HandlerType: (*RizzoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PuppetApply",
			Handler:    _Rizzo_PuppetApply_Handler,
		},
		{
			MethodName: "PuppetLastApply",
			Handler:    _Rizzo_PuppetLastApply_Handler,
		},
		{
			MethodName: "PuppetLock",
			Handler:    _Rizzo_PuppetLock_Handler,
		},
		{
			MethodName: "PuppetUnlock",
			Handler:    _Rizzo_PuppetUnlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CorrectiveChange {
		i--
		if m.CorrectiveChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DesiredValue) > 0 {
		i -= len(m.DesiredValue)
		copy(dAtA[i:], m.DesiredValue)
		i = encodeVarintReport(dAtA, i, uint64(len(m.DesiredValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PreviousValue) > 0 {
		i -= len(m.PreviousValue)
		copy(dAtA[i:], m.PreviousValue)
		i = encodeVarintReport(dAtA, i, uint64(len(m.PreviousValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Property) > 0 {
		i -= len(m.Property)
		copy(dAtA[i:], m.Property)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Property)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PuppetReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PuppetReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PuppetReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CachedCatalogStatus) > 0 {
		i -= len(m.CachedCatalogStatus)
		copy(dAtA[i:], m.CachedCatalogStatus)
		i = encodeVarintReport(dAtA, i, uint64(len(m.CachedCatalogStatus)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CorrectiveChange {
		i--
		if m.CorrectiveChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.ResourceStatuses) > 0 {
		for k := range m.ResourceStatuses {
			v := m.ResourceStatuses[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintReport(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintReport(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintReport(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NoopPending {
		i--
		if m.NoopPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Noop {
		i--
		if m.Noop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.TransactionCompleted {
		i--
		if m.TransactionCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PuppetVersion) > 0 {
		i -= len(m.PuppetVersion)
		copy(dAtA[i:], m.PuppetVersion)
		i = encodeVarintReport(dAtA, i, uint64(len(m.PuppetVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReportFormat != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.ReportFormat))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConfigurationVersion) > 0 {
		i -= len(m.ConfigurationVersion)
		copy(dAtA[i:], m.ConfigurationVersion)
		i = encodeVarintReport(dAtA, i, uint64(len(m.ConfigurationVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Skipped {
		i--
		if m.Skipped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintReport(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ProviderUsed) > 0 {
		i -= len(m.ProviderUsed)
		copy(dAtA[i:], m.ProviderUsed)
		i = encodeVarintReport(dAtA, i, uint64(len(m.ProviderUsed)))
		i--
		dAtA[i] = 0x4a
	}
	if m.OutOfSyncCount != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.OutOfSyncCount))
		i--
		dAtA[i] = 0x40
	}
	if m.OutOfSync {
		i--
		if m.OutOfSync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.FailedToRestart {
		i--
		if m.FailedToRestart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Failed {
		i--
		if m.Failed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CorrectiveChange {
		i--
		if m.CorrectiveChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ContainmentPath) > 0 {
		for iNdEx := len(m.ContainmentPath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContainmentPath[iNdEx])
			copy(dAtA[i:], m.ContainmentPath[iNdEx])
			i = encodeVarintReport(dAtA, i, uint64(len(m.ContainmentPath[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Changed {
		i--
		if m.Changed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ChangeCount != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.ChangeCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PuppetApplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PuppetApplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PuppetApplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Noop {
		i--
		if m.Noop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rev) > 0 {
		i -= len(m.Rev)
		copy(dAtA[i:], m.Rev)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Rev)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PuppetLastApplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PuppetLastApplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PuppetLastApplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PuppetLockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PuppetLockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PuppetLockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintReport(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PuppetLockReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PuppetLockReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PuppetLockReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Locked {
		i--
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PuppetUnlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PuppetUnlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PuppetUnlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintReport(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PuppetUnlockReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PuppetUnlockReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PuppetUnlockReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Unlocked {
		i--
		if m.Unlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintReport(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Property)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.PreviousValue)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.DesiredValue)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.CorrectiveChange {
		n += 2
	}
	return n
}

func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func (m *PuppetReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.ConfigurationVersion)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.ReportFormat != 0 {
		n += 1 + sovReport(uint64(m.ReportFormat))
	}
	l = len(m.PuppetVersion)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.TransactionCompleted {
		n += 2
	}
	if m.Noop {
		n += 2
	}
	if m.NoopPending {
		n += 2
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovReport(uint64(l))
		}
	}
	if len(m.ResourceStatuses) > 0 {
		for k, v := range m.ResourceStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReport(uint64(mapEntrySize))
		}
	}
	if m.CorrectiveChange {
		n += 2
	}
	l = len(m.CachedCatalogStatus)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func (m *ResourceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeCount != 0 {
		n += 1 + sovReport(uint64(m.ChangeCount))
	}
	if m.Changed {
		n += 2
	}
	if len(m.ContainmentPath) > 0 {
		for _, s := range m.ContainmentPath {
			l = len(s)
			n += 1 + l + sovReport(uint64(l))
		}
	}
	if m.CorrectiveChange {
		n += 2
	}
	if m.Failed {
		n += 2
	}
	if m.FailedToRestart {
		n += 2
	}
	if m.OutOfSync {
		n += 2
	}
	if m.OutOfSyncCount != 0 {
		n += 1 + sovReport(uint64(m.OutOfSyncCount))
	}
	l = len(m.ProviderUsed)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.Skipped {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovReport(uint64(l))
		}
	}
	return n
}

func (m *PuppetApplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rev)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.Noop {
		n += 2
	}
	return n
}

func (m *PuppetLastApplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PuppetLockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func (m *PuppetLockReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.Locked {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func (m *PuppetUnlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func (m *PuppetUnlockReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	if m.Unlocked {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func sovReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReport(x uint64) (n int) {
	return sovReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Property = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrectiveChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CorrectiveChange = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PuppetReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PuppetReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PuppetReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigurationVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportFormat", wireType)
			}
			m.ReportFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportFormat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PuppetVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PuppetVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionCompleted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noop = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoopPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoopPending = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceStatuses == nil {
				m.ResourceStatuses = make(map[string]*ResourceStatus)
			}
			var mapkey string
			var mapvalue *ResourceStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReport
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReport
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthReport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResourceStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResourceStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrectiveChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CorrectiveChange = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedCatalogStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CachedCatalogStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCount", wireType)
			}
			m.ChangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Changed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainmentPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainmentPath = append(m.ContainmentPath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrectiveChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CorrectiveChange = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedToRestart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailedToRestart = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfSync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOfSync = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfSyncCount", wireType)
			}
			m.OutOfSyncCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutOfSyncCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skipped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skipped = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PuppetApplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PuppetApplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PuppetApplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PuppetLastApplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PuppetLastApplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PuppetLastApplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PuppetLockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PuppetLockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PuppetLockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PuppetLockReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PuppetLockReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PuppetLockReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PuppetUnlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PuppetUnlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PuppetUnlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PuppetUnlockReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PuppetUnlockReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PuppetUnlockReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unlocked = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReport = fmt.Errorf("proto: unexpected end of group")
)
